<project name="ioncore-java" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">
    <!-- import properties -->
    <property file="build.properties" />
    <!-- ivy properties & settings -->
    <property file="${settings.dir}/ivysettings.properties" />
    <ivy:settings file="${settings.dir}/ivysettings.xml" />
    <!-- ooici properties -->
    <property file="${settings.dir}/ooici.properties" />
    <!-- import the ooici_build.xml -->
    <import file="${settings.dir}/ooici-build.xml" />
    
    <!--
    	Targets that can be overridden:
    		- pre-compile:		Called before javac compilation - empty by default, override in build.xml to use
      		- post-compile:		Called after javac compilation - empty by default, override in build.xml to use
      		- pre-dist:			Called before all actions in the dist target - empty by default, override in build.xml to use
      		- post-dist:		Called after all actions in the dist target - empty by default, override in build.xml to use
      		- clean-more:		Called at the end of 'clean' - empty by default, override in build.xml to use
    -->
    
    <!-- ================================= 
          target: post-compile
         ================================= -->
    <target name="post-compile" >
        <!-- copy the log4j.properties file -->
        <copy file="${src.dir}/log4j.properties" todir="${build.dir}" />
    </target>
    
	<!-- ================================= 
          target: runex              
         ================================= -->
	<target name="runex" depends="resolve,compile" description="--> Run Example">
		<java classname="ion.example.ServiceConsume">
			<classpath refid="runtime.classpath"/>
			<sysproperty key="ioncore.sysname" value="${user.name}"/>
		</java>
	</target>
    
    <property name="pub.resolver" value="default" />

<!-- start ivy targets -->
	<property name="ivy.jar.version" value="2.2.0"/>
	<property name="ivy.jar.name" value="ivy-${ivy.jar.version}.jar"/>
	<property name="ivy.home" value="${user.home}/.ivy2"/>
	<available property="ivy.installed" file="${ivy.home}/${ivy.jar.name}"/>

	<target name="ivy-install" unless="ivy.installed">
		<mkdir dir="${ivy.home}"/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.jar.version}/${ivy.jar.name}" dest="${ivy.home}/${ivy.jar.name}"/>
	</target>

	<target name="ivy-init" depends="ivy-install">
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.home}/${ivy.jar.name}"/>
	</target>

	<target name="ivy-retrieve" depends="ivy-init" description="downloads jars for the project">
		<ivy:retrieve pattern="bin/lib/[conf]/[type]s/[artifact].[ext]" conf="*" type="*"/>
	</target>

	<target name="gen-pom" depends="ivy-init">
		<ivy:makepom ivyfile="ivy.xml" pomfile="bin/poms/${ant.project.name}.pom">
			<mapping conf="default" scope="compile"/>
		</ivy:makepom>
	</target>

	<target name="ivy-publish-local" depends="dist, ivy-init,gen-pom" description="publish jar/source to maven repo mounted at ~/.m2/repository">
                <!-- snapshots only exist locally, so kick the cache. -->
                <ivy:publish resolver="maven-local-publish" forcedeliver="true" overwrite="true" publishivy="true">
                        <artifacts pattern="dist/lib/[artifact]-[revision].[ext]" />
                </ivy:publish>
        </target>

	<target name="ivy-publish-share" depends="dist,ivy-init,gen-pom" description="publish jar/source to maven repo mounted at ~/repo">
		<ivy:publish resolver="maven-share" forcedeliver="true" overwrite="true" publishivy="true">
			<artifacts pattern="dist/lib/[artifact]-[revision].[ext]" />
		</ivy:publish>
	</target>
	<!-- end ivy targets -->

<!--


.settings/ivysettings.xml:        	subsequent repositories.  This mechanism allows testing of new libraries/revisions prior to moving them to the
.settings/ivysettings.xml:        		<artifact pattern="${override-repo.dir}/[artifact]-[revision].[ext]" />
.settings/ivysettings.xml:            	<artifact pattern="${override-repo.dir}/[artifact]_[revision].[ext]" />
.settings/ivysettings.xml:            	<artifact pattern="${ooici.repo.base}/[artifact]-[revision].[ext]" />
.settings/ivysettings.xml:            	<artifact pattern="${ooici.repo.base}/[artifact]_[revision].[ext]" />
.settings/ivysettings.xml:                pattern="[organisation]/[artifact]/[revision]/[artifact]-[revision].[ext]"/>
.settings/ivysettings.xml:            	pattern="[organisation]/[artifact]/[revision]/[artifact]-[revision].[ext]"/>
.settings/ivysettings.xml:                                     pattern="[organisation]/[type]s/[artifact]-[revision].[ext]"/>

-->

</project>
